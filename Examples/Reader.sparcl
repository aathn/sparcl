def (.) f g = \x -> f (g x)
fixity . 90 right

def ($) = \f x -> f x
fixity $ 0 right

sig fst : forall a b. (a, b) -> a
def fst (x, _) = x

sig snd : forall a b. (a, b) -> b
def snd (_, x) = x

sig invert : forall a b. (rev a -o rev b) -> rev b -o rev a
def invert f = let (x, y) <- unlift f in lift y x

sig fwd : forall a b. (rev a -o rev b) -> a -> b
def fwd = fst . unlift

sig bwd : forall a b. (rev a -o rev b) -> b -> a
def bwd = snd . unlift

sig const : (a # p -> a # q -> Bool) -> a -> rev a
def const eq c =
  lift (\() -> c)
       (\c' -> let True <- eq c c' in ())
       (rev ())

sig copy : (a # p -> a # q -> Bool) -> rev a -o rev (a, a)
def copy eqA a = pin a (const eqA)

sig pair : rev a -o rev b -o rev (a, b)
def pair a b = rev (a, b)

sig swap : rev (a, b) -o rev (b, a)
def swap (rev (a, b)) = rev (b, a)

sig unitl : rev ((), x) -o rev x
def unitl (rev ((), x)) = x

sig assocr : rev ((a, b), c) -o rev (a, (b, c))
def assocr (rev ((a, b), c)) = rev (a, rev (b, c))

data Either a b = Left a | Right b

sig isLeft : Either a b -> Bool
def isLeft (Left _) = True
         | _        = False

sig joinBranch : (a -> Bool) -> rev (Either a a) -o rev a
def joinBranch branchP (rev Left a)  = a with branchP
             | branchP (rev Right a) = a

sig mirror : rev (Either a b) -o rev (Either b a)
def mirror (rev Right a) = rev Left a with isLeft
         | (rev Left a)  = rev Right a

sig distr : rev (Either a b, c) -o rev (Either (a, c) (b, c))
def distr (rev (Left  a, c)) = rev Left  rev (a, c) with isLeft
        | (rev (Right b, c)) = rev Right rev (b, c)

data List a = Cons a (List a) | Nil

sig null : List a -> Bool
def null Nil = True
       | _   = False

type Reader c x y = rev (c, x) -o rev (c, y)

sig arr : (rev a -o rev b) -o Reader c a b
def arr f (rev (c, a)) = rev (c, f a)

sig (>>>) : Reader d a b -o Reader d b c -o Reader d a c
def (>>>) ra rb da = rb (ra da)

sig first : Reader c a b -o Reader c (a, d) (b, d)
def first ra (rev (c, (a, d))) =
  let rev (c, b) <- ra rev (c, a) in
  rev (c, rev (b, d))

sig second : Reader c a b -o Reader c (d, a) (d, b)
def second ra = arr swap >>> first ra >>> arr swap

sig (***) : Reader e a c -o Reader e b d -o Reader e (a, b) (c, d)
def (***) ra rb = first ra >>> second rb

sig arrFork : (a # p -> a # q -> Bool) -> Reader d a b -o Reader d a c -o Reader d a (b, c)
def arrFork eqA rb rc = arr (copy eqA) >>> (rb *** rc)

sig arrInv : Reader c a b -> Reader c b a
def arrInv = invert

sig left : Reader c a b -> Reader c (Either a d) (Either b d)
def left ra (rev (c, Left a)) =
         let rev (c, b) <- ra rev (c, a) in
         rev (c, rev Left b)
         with isLeft . snd
       | ra (rev (c, Right d)) = rev (c, rev Right d)

sig right : Reader c a b -> Reader c (Either d a) (Either d b)
def right ra = arr mirror >>> left ra >>> arr mirror

sig (+++) : Reader e a c -> Reader e b d -> Reader e (Either a b) (Either c d)
def (+++) ra rb = left ra >>> right rb

sig arrCase : (c -> Bool) -> Reader d a c -> Reader d b c -> Reader d (Either a b) c
def arrCase branchP ra rb = (ra +++ rb) >>> arr (joinBranch branchP)

sig withCtx : Reader c a b -o Reader d (c, a) (c, b)
def withCtx = arr

sig get : (c # p -> c # q -> Bool) -> Reader c a (c, a)
def get eq (rev (c, a)) = let rev (c, c') <- copy eq c in rev (c, rev (c', a))

sig assert : (c # p -> c # q -> Bool) -> Reader c (c, a) a
def assert eq = arrInv (get eq)

sig fromReader : (c # p -> c # q -> Bool) -> Reader c x y -o c -> rev x -o rev y
def fromReader eqC r c x = let c' <- const eqC c in invert (pair c') (r rev (c', x))

sig toReader : (c -> rev x -o rev y) -o Reader c x y
def toReader f (rev (c, x)) = pin c (\c' -> f c' x)

-- sig goSubs : Reader Int (List Int) (List Int)
-- def goSubs = proc l -> do
--   case l of
--   | rev Nil -> returnA -< rev Nil with null
--   | rev (Cons x xs) -> do
--     rev (x, r) <- withCtx goSubs -< rev (x, xs)
--     x' <- sub -< x
--     returnA -< rev Cons x' r
--   end

sig goSubs : Reader Int (List Int) (List Int)
def goSubs =
  arr uncons >>>
  arrCase null
    (arr (\(rev ()) -> rev Nil))
    (withCtx goSubs >>>
      first sub >>>
        arr (\(rev (x, r)) -> rev Cons x r))

sig subs : rev (List Int) -o rev (List Int)
def subs xs =
  let r0 <- const eqInt 0 in
  invert (pair r0) (goSubs rev (r0, xs))

sig sub : Reader Int Int Int
def sub = lift (\(m, n) -> (m, n - m))
               (\(m, n) -> (m, n + m))

sig uncons : rev (List a) -o rev (Either () (a, List a))
def uncons (rev Nil)         = rev Left  rev () with isLeft
         | (rev (Cons x xs)) = rev Right rev (x, xs)

data Tree = L | N Int Tree Tree

sig piR : rev Tree -o rev (List Int, List Int)
def piR (rev L)       = rev (rev Nil, rev Nil) with null . fst
      | (rev N a l r) =
        let rev (pr, ir)      <- piR r in
        let rev (a, (pl, il)) <- piAccSR rev (a, rev (l, rev (pr, ir))) in
        rev (rev Cons a pl, il)

-- sig piAccSR : Reader Int (Tree, (List Int, List Int)) (List Int, List Int)
-- def piAccSR = proc (rev (t, pyiy)) -> do
--   case t of
--   | rev L -> do
--     rev (h, (py, iy)) <- get eqInt -< pyiy
--     get eqInt -< rev (py, rev Cons h iy)
--     with \(h1, (_, Cons h2 _)) -> eqInt h1 h2
--   | rev (N a l r) -> do
--     rev prir          <- piAccSR -< rev (r, pyiy)
--     rev (a, (pl, il)) <- withCtx piAccSR -< rev (a, rev (l, prir))
--     get eqInt -< rev (rev Cons a pl, il)
--   end
--     >>> assert eqInt

sig piAccSR : Reader Int (Tree, (List Int, List Int)) (List Int, List Int)
def piAccSR =
  first (arr untree) >>> arr distr >>>
  arrCase (\(h1, (_, Cons h2 _)) -> eqInt h1 h2)
    (arr unitl >>> get eqInt >>>
     arr (\(rev (h, (py, iy))) -> rev (py, rev Cons h iy)) >>> get eqInt)
    (arr assocr >>> second piAccSR >>>
     arr assocr >>> withCtx piAccSR >>>
     arr (\(rev (a, (pl, il))) -> rev (rev Cons a pl, il)) >>> get eqInt) >>>
  assert eqInt

sig untree : rev Tree -o rev (Either () ((Int, Tree), Tree))
def untree (rev L)         = rev Left  rev () with isLeft
         | (rev (N a l r)) = rev Right rev (rev (a, l), r)

type Symbol = Char
data Huff   = Lf Symbol | Br Huff Huff

sig isLf : Huff -> Bool
def isLf (Lf _) = True
       | _      = False

sig member : Symbol -> Huff -> Bool
def member s (Lf s')  = eqChar s s'
         | s (Br l r) =
           case member s l of
           | True  -> True
           | False -> member s r
           end

sig eqHuff : Huff -> Huff -> Bool
def eqHuff (Lf s)   (Lf s') = eqChar s s'
        |  (Br l r) (Br l' r') =
          case eqHuff l l' of
          | True  -> eqHuff r r'
          | False -> False
          end
        |  _         _ = False

sig unhuff : rev Huff -o rev (Either Symbol (Huff, Huff))
def unhuff (rev Lf s)   = rev Left  s          with isLeft
         | (rev Br l r) = rev Right rev (l, r)

data Bit = Z | O

sig unbit : rev (List Bit) -o rev (Either (List Bit) (List Bit))
def unbit (rev Cons Z l) = rev Left  l with isLeft
        | (rev Cons O l) = rev Right l

-- sig decR : Reader Huff (List Bit) (Symbol, List Bit)
-- def decR = proc ys -> do
--   rev (huff, ys) <- get eqHuff -< ys
--   case huff of
--   | rev Lf s   -> get eqHuff -< rev (s, ys) with isLf . fst
--   | rev Br l r ->
--     case ys of
--     | rev (Cons Z ys') -> do
--       rev (l, res) <- withCtx decR -< rev (l, ys')
--       returnA -< rev (rev Br l r, res) with (\(Br l r, (s,_)) -> member s l)
--     | rev (Cons O ys') -> do
--       rev (r, res) <- withCtx decR -< rev (r, ys')
--       returnA -< rev (rev Br l r, res)
--     end
--   end
--     >>> assert eqHuff

sig decR : Reader Huff (List Bit) (Symbol, List Bit)
def decR =
  get eqHuff >>> first (arr unhuff) >>> arr distr >>>
  arrCase (isLf . fst)
    (get eqHuff)
    (arr swap >>> first (arr unbit) >>> arr distr >>>
     arrCase (\(Br l r, (s,_)) -> member s l)
       (arr swap >>> first (arr swap) >>> arr assocr >>> second (withCtx decR) >>>
        arrInv (arr assocr) >>> first (arr (\(rev (r, l)) -> rev Br l r)))
       (arr swap >>> arr assocr >>> second (withCtx decR) >>>
        arrInv (arr assocr) >>> first (arr (\(rev (l, r)) -> rev Br l r)))) >>>
  assert eqHuff

sig encR : Reader Huff (Symbol, List Bit) (List Bit)
def encR = arrInv decR

-- sig encode : Reader Huff (List Symbol) (List Bit)
-- def encode = proc l ->
--   case l of
--   | rev Nil       -> returnA -< rev Nil with null
--   | rev Cons s ss -> do
--       rest <- encode -< ss
--       encR -< rev (s, rest)
--   end

sig encode : Reader Huff (List Symbol) (List Bit)
def encode =
  arr uncons >>>
  arrCase null
    (arr (\(rev ()) -> rev Nil))
    (second encode >>> encR)

sig dummyHuff : Huff
def dummyHuff = Br (Lf 'a') (Br (Lf 'b') (Br (Lf 'c') (Lf 'd')))

sig makeHuff : rev (List Symbol) -o rev (Huff, List Symbol)
def makeHuff s = rev (const eqHuff dummyHuff, s)

sig huffCompress : rev (List Symbol) -o rev (Huff, List Bit)
def huffCompress = encode . makeHuff
