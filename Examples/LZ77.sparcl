def (.) f g = \x -> f (g x)
fixity . 90 right

sig fst : forall a b. (a, b) -> a
def fst (x, _) = x

sig snd : forall a b. (a, b) -> b
def snd (_, x) = x

sig delete : a -> a <-> ()
def delete c *a = (\*() -> c) <| a

sig and : Bool -> Bool -> Bool
def and True True = True
      | _    _    = False

type Symbol = Char
data LZPair = Lit Symbol | Pair (Int, Int)

sig isLit : LZPair -> Bool
def isLit (Lit _) = True
        | _       = False

data List a = Cons a (List a) | Nil

sig null : List a -> Bool
def null Nil = True
       | _   = False

sig head : List a -> a
def head (Cons x _) = x

sig length : List a -> Int
def length Nil        = 0
         | (Cons _ t) = 1 + length t

sig take : Int -> List a -> List a
def take _ Nil        = Nil
       | 0 _          = Nil
       | n (Cons h t) = Cons h (take (n-1) t)

sig repeatTake : Int -> List a -> List a
def repeatTake n l = goRepeatTake n l l
  where
    def goRepeatTake 0 _  _          = Nil
                   | n l1 Nil        = goRepeatTake n l1 l1
                   | n l1 (Cons h t) = Cons h (goRepeatTake (n - 1) l1 t)
  end

sig revTake : Int -> List a -> List a
def revTake n l = goRevTake n l Nil
  where
    def goRevTake _ Nil        acc = acc
                | 0 _          acc = acc
                | n (Cons h t) acc = goRevTake (n - 1) t (Cons h acc)
  end

sig revApp : List a -> List a -> List a
def revApp Nil        l = l
         | (Cons h t) l = revApp t (Cons h l)

data Maybe a = Nothing | Just a

sig isNothing : Maybe a -> Bool
def isNothing Nothing = True
            | _       = False

sig winLength : Int
def winLength = 2048

sig lz77 : List Symbol <-> List LZPair
def lz77 = goLz77 Nil
  where
    def goLz77 window Nil   = Nil with null
             | window input =
      let *(Cons h t, pair) <- pin input' <- input in maxMatch window input' in
      case pair of
      | Nothing ->
        let *(h,lzRest) <- pin h <- h in
          goLz77 (take winLength (Cons h window)) |> t in
        Cons (Lit h) lzRest
        with isLit . head
      | Just (d, l) ->
        let *(l, (match, rest)) <- pin l <- l in split l |> Cons h t in
        let *(match, lzRest) <- pin match <- match in
          goLz77 (take winLength (revApp match window)) |> rest in
        let *(p, ()) <- pin p <- (d, l) in
          delete (getMatch window p) |> match in
        Cons (Pair p) lzRest
      end
  end

sig maxMatch : List Symbol -> List Symbol -> Maybe (Int, Int)
def maxMatch window input =
  let (d, l) <- goMaxMatch (0, 0) Nil window input in
  case l of
  | 0 -> Nothing
  | _ -> Just (d, l)
  end
  where
    def goMaxMatch bestMatch matchBuf Nil        input = bestMatch
                 | bestMatch matchBuf (Cons h t) input =
                   let matchBuf <- Cons h matchBuf in
                   let newMatch <- updateMatch bestMatch matchBuf input in
                   goMaxMatch newMatch matchBuf t input

    def updateMatch (d, l) matchBuf input =
      let newLength <- length (createMatch matchBuf matchBuf input) in
      case ltInt l newLength of
      | True -> (length matchBuf, newLength)
      | False -> (d, l)
      end

    def createMatch matchBuf Nil          input        = createMatch matchBuf matchBuf input
                  | matchBuf _            Nil          = Nil
                  | matchBuf (Cons h1 t1) (Cons h2 t2) =
                    case eqChar h1 h2 of
                    | True -> Cons h1 (createMatch matchBuf t1 t2)
                    | False -> Nil
                    end
  end

sig getMatch : List Symbol -> (Int, Int) -> List Symbol
def getMatch window (d, l) = repeatTake l (revTake d window)

sig split : Int -> List Symbol <-> (List Symbol, List Symbol)
def split _ Nil        = (Nil, Nil) with \(x, y) -> and (null x) (null y)
        | n (Cons h t) =
          case n of
          | 0 -> (Nil, Cons h t)
          | _ -> let *(hs, ts) <- split (n - 1) |> t in (Cons h hs, ts)
          end

def origList = Cons 'a' (Cons 'b' (Cons 'c' (Cons 'c' (Cons 'c' (Cons 'a' (Cons 'b' (Cons 'c' Nil)))))))
def compressed = lz77 |> origList
def origList' = lz77 <| compressed
