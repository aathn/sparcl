-- Checking some functions form Haskell's Prelude. 

data Maybe a = Nothing | Just a

def maybe e f Nothing  = e 
        | e f (Just a) = f a 

data Either a b = Left a | Right b

def either left right (Left a)  = left a 
         | left right (Right b) = right b

sig fst : (a, b) -> a 
def fst (a,_) = a

sig snd : (a, b) -> b 
def snd (_,b) = b 

def curry f x y = f (x,y)

def uncurry f (x,y) = f x y 

def ($) f x = f x 

def (.) f g = \x -> f (g x)

def flip f x y = f y x 

def flipflip = flip . flip 

def dot8  = (.) (.) (.) (.) (.) (.) (.) (.) 
def dot12 = (.) (.) (.) (.) (.) (.) (.) (.) (.) (.) (.) (.) 

fixity $ 0 right
fixity . 90 right

data List a = Nil | Cons a (List a) 

def head (Cons a _) = a 

def last (Cons a x) = go a x 
    where
      def go a Nil        = a
           | a (Cons b y) = go b y 
    end

def init (Cons a x) = go a x 
    where
        def go a Nil = Nil
             | a (Cons b y) = Cons a (go b y) 
    end 

def tail (Cons _ x) = x 

def null Nil = True
       | (Cons _ _) = False 

def length Nil        = 0 
         | (Cons _ x) = 1 + length x 

sig map : (p <= q) => (a # p -> b) -> List a # q -> List b 
def map f Nil        = Nil  
      | f (Cons a x) = Cons (f a) (map f x) 

def mapByfoldr f = foldr (Cons . f) Nil

def filter p Nil = Nil 
         | p (Cons a x) = case p a of 
           | True -> Cons a (filter p x)
           | False -> filter p x
           end 

def filterByfoldr p = flip foldr Nil $ (\a -> case p a of 
                                          | True -> Cons a 
                                          | False -> \x -> x
                                          end)

def foldr f e Nil        = e
        | f e (Cons a x) = f a (foldr f e x) 

def foldl f e Nil        = e
        | f e (Cons a x) = foldl f (f e a) x 

def reverse xs = rv xs Nil
      where
    def rv Nil         ys = ys 
         | (Cons x xs) ys = rv xs (Cons x ys) 
  end


def reverseFoldl = foldl (\xs a -> Cons a xs) Nil 

sig tail : List a -> List a 
def tail (Cons a x) = x 

sig const : a # p -> b -> a
def const a _ = a 

def dupList dupElem lst = case lst of 
    | Nil -> (Nil, Nil)
    | Cons a x -> 
      case dupElem a of
      | (a1, a2) -> 
            case dupList dupElem x of
            | (x1, x2) -> 
              (Cons a1 x1, Cons a2 x2)
            end
      end
    end
            
def until p f x = case p x of
    | True  -> x 
    | False -> 
      until p f (f x)
    end 

def append Nil y = y 
         | (Cons a x) y = Cons a (append x y)

def appendFoldr x y = foldr Cons y x

def concat Nil        = Nil
         | (Cons a x) = append a (concat x) 

def concatFoldr = foldr append Nil 

def concatMap f Nil        = Nil 
            | f (Cons a x) = append (f a) (concatMap f x)

def concatMapComp f = concat . map f 

def concatMapFoldr f = foldr (append . f) Nil

def scanl = go 
   where
        def go f q ls = Cons q (case ls of Nil -> Nil | Cons x xs -> go f (f q x) xs end  )  
   end

def scanr _ q0 Nil = Cons q0 Nil
        | f q0 (Cons x xs) = 
          (\qs -> Cons (f x (head qs)) qs) (scanr f q0 xs)

def span f Nil = (Nil, Nil)
       | f (Cons x xs) = 
           case f x of
           | True -> case span f xs of 
                     | (ys, zs) -> (Cons x ys, zs)
                     end
           | False -> (Nil, Cons x xs)
           end
           

def unzip Nil = (Nil, Nil)
        | (Cons (a, b) xs) = 
          case unzip xs of 
          | (as, bs) -> (Cons a as, Cons b bs)
          end 

def unlines Nil = Nil 
          | (Cons a x) = append a (Cons '\n' (unlines x))

----

data F a = MkF (F a -> a)

sig out : forall a. F a -o F a -> a 
def out (MkF f) = f 

-- sig myfix : ((a # p -> b) -> (a # p -> b)) -> a # p -> b 
def myfix f a = (\x a -> f (out x x) a) (MkF (\x a -> f (out x x) a)) a


def myfixRec f a = f (\x -> myfixRec f x) a 

data Nat = Z | S Nat 

def addCps Z     y k = k y
      |    (S x) y k = addCps x y (\r -> k (S r))

def add x y = addCps x y (\x -> x) 

sig f : a # p -> a 
def f = 
    let 
        -- Currently we do not check the closedness so the signature is necessary.
        sig id : forall q b. b # q -> b 
        def id x = x 
    in id id id id id id id id id id id id id id id id id 