data Tree = L | N Int Tree Tree
data List a = Nil | Cons a (List a) 

sig const : forall a p q. (a # p -> a # q -> Bool) -> a -> rev a 
def const eq c = lift (\_ -> c)
                      (\c' -> case eq c c' of True -> () end) (rev ())

sig null : forall a. List a -> Bool
def null Nil  = True
       | _    = False
       
sig piR : rev Tree -o rev (List Int, List Int)
def piR (rev L) = rev (rev Nil, rev Nil) with (\(p,yy) -> null p) 
      | (rev N a l r) = 
         case piR r of
         | rev (pr, ir) -> 
           case pin a (\a' -> piAccSR a' l pr ir) of 
           | rev (a, (pl, il)) -> rev (rev Cons a pl, il)
           end
         end  

sig piAccSR : Int -> rev Tree -o rev (List Int) -o rev (List Int) -o rev (List Int, List Int)
def piAccSR h t py iy = 
  case t of 
  | rev L -> rev (py, rev Cons (const eqInt h) iy)
                      with (\ (xx, Cons h' yy) -> eqInt h h')
  | rev (N a l r) -> 
          case piAccSR h r py iy of
          | rev (pr, ir) -> 
            case pin a (\a' -> piAccSR a' l pr ir) of
            | rev (a, (pl, il)) -> rev (rev Cons a pl, il)
            end
          end
  end 

def pitrav = case unlift piR of (x,y) -> x end 
def piinv  = case unlift piR of (x,y) -> y end 

def t0 = N 0 (N 1 (N 2 L L) (N 3 L L)) (N 4 L L)
