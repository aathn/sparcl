-- Correponds to Section 4.1 in the paper 

data Tree = L | N Int Tree Tree
data List a = Nil | Cons a (List a) 

sig const : forall a p q. (a # p -> a # q -> Bool) -> a -> rev a 
def const eq c = lift (\_ -> c)
                      (\c' -> case eq c c' of True -> () end) (rev ())

sig (.) : (q <= pg, q <= px, p <= px) => (b # q -> c) # pf -> (a # p -> b) # pg -> a # px -> c 
def (.) f g = \x -> f (g x) 

def head (Cons x _) = x 

def fst (x, y) = x 
def snd (x, y) = y 

-- sig ($) : forall a b. (a -o b) -o a -o b 
def ($) f x = f x 
-- NB: definition like f $ x = f x is not possible in the current version
fixity $ 0 right 


sig null : forall a. List a -> Bool
def null Nil  = True
       | _    = False
       
sig piR : rev Tree -o rev (List Int, List Int)
def piR (rev L) = rev (rev Nil, rev Nil) with null . fst  -- (\(p,yy) -> null p) 
      | (rev N a l r) = 
        let rev (pr, ir)      <- piR r in 
        let rev (a, (pl, il)) <- pin a $ \a' -> piAccSR a' l pr ir in 
        rev (rev Cons a pl, il)        

sig piAccSR : Int -> rev Tree -o rev (List Int) -o rev (List Int) -o rev (List Int, List Int)
def piAccSR h t py iy = 
  case t of 
  | rev L -> rev (py, rev Cons (const eqInt h) iy)
             with eqInt h . head . snd 
--                       with (\ (xx, Cons h' yy) -> eqInt h h')
  | rev (N a l r) -> 
    let rev (pr, ir)      <- piAccSR h r py iy in
    let rev (a, (pl, il)) <- pin a $ \a' -> piAccSR a' l pr ir in 
    rev (rev Cons a pl, il)
  end 

def pitrav = case unlift piR of (x,y) -> x end 
def piinv  = case unlift piR of (x,y) -> y end 

def t0 = N 0 (N 1 (N 2 L L) (N 3 L L)) (N 4 L L)

def tr0 = pitrav t0 

def t0' = piinv tr0 -- must be equal to t0