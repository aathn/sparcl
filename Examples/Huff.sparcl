-- ($) is useful for reducing paretheses. 
def ($) = \f x -> f x 
fixity $ 0 right 

type Symbol = Char
data Huff = Lf Symbol | Br Huff Huff

data Bit = Z | O 
data List a = Nil | Cons a (List a) 

sig const : forall a p q. (a # p -> a # q -> Bool) -> a -> rev a 
def const eq c = lift (\_ -> c) (\c' -> case eq c c' of True -> () end) (rev ())

sig invert : forall a b. (rev a -o rev b) -> rev b -o rev a 
def invert h = 
   case unlift h of 
   | (f, g) -> lift g f 
   end

sig decR : Huff -> rev (List Bit) -o rev (Symbol, List Bit)
def decR (Lf s)   ys = rev (const eqChar s, ys) 
       | (Br l r) ys = case ys of 
         | rev (Cons Z ys') -> decR l ys' with (\(s, _) ->  member s l)
         | rev (Cons O ys') -> decR r ys' 
         end 

sig encR : Huff -> rev Symbol -o rev (List Bit) -o rev (List Bit) 
def encR h s ys = invert (decR h) (rev (s, ys))

sig member : Symbol -> Huff -> Bool 
def member s (Lf s')  = eqChar s s' 
         | s (Br l r) = 
           case member s l of 
           | True  -> True 
           | False -> member s r
           end 

-- This dummy function always returns the same huffman tree. We could 
-- implement usual construction of Huffman tree but this function is entirely 
-- unidirectional. 

sig makeHuff : List Symbol -> Huff
def makeHuff _ = Br (Lf 'a') (Br (Lf 'b') (Br (Lf 'c') (Lf 'd')))

sig huffCompress : rev (List Symbol) -o rev (Huff, List Bit)
def huffCompress s = case pin s (\s' -> const eqHuff (makeHuff s')) of 
         | rev (s, h) -> pin h (\h' -> encode h' s)
         end

sig huffCompressLet : rev (List Symbol) -o rev (Huff, List Bit) 
def huffCompressLet s = 
    let rev (s, h) <- pin s $ \s' -> const eqHuff (makeHuff s') in 
    pin h $ \h' -> encode h' s

sig huffCompressDo : rev (List Symbol) -o rev (Huff, List Bit) 
def huffCompressDo s = 
   revdo s  <- s ;
         h  <- const eqHuff (makeHuff s) ;
   in    revdo h <- h ; 
               r <- encode h s; 
         in    rev (h, r)

sig encode : Huff -> rev (List Symbol) -o rev (List Bit)
def encode h (rev Nil)       = rev Nil with null
         | h (rev Cons s ss) = encR h s (encode h ss) 


sig null : forall a. List a -> Bool 
def null Nil = True
      |  _   = False 


sig eqHuff : Huff -> Huff -> Bool 
def eqHuff (Lf s)   (Lf s') = eqChar s s' 
        |  (Br l r) (Br l' r') =
          case eqHuff l l' of
          | True  -> eqHuff r r' 
          | False -> False 
          end
        |  _         _ = False 

def fwd h = case unlift h of 
            | (x, y) -> x 
            end 

def bwd h = case unlift h of 
            | (x, y) -> y
            end 

def origList = Cons 'a' (Cons 'a' (Cons 'b' (Cons 'a' (Cons 'c' (Cons 'a' (Cons 'b' (Cons 'd' (Cons 'a' (Cons 'a' Nil)))))))))

def t0 = fwd huffCompress origList

def t1 = bwd huffCompress t0 

def t0' = fwd huffCompressDo origList

def t1' = bwd huffCompressDo t0' 

def t0'' = fwd huffCompressLet origList 
def t1'' = bwd huffCompressLet t0'' 