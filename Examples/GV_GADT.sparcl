{-
This examples taken from 
 - J. Garrett Morris: The Best of Both Worlds Linear Functional Programming without Compromise, ICFP 2016.
 - Sam Lindley,  J. Garrett Morris: Embedding Session Types in Haskell, Haskell 2016. 
-}

import Examples.GVType 

data GV ses where 
  sig GFork : Dual s s' -> (GV s -o GV EndS) -o GV s' 
  sig GSend : t -o GV (Send t s) -o GV s 
  sig GRecv : GV (Recv t s) -o (t -o GV s -o GV r) -o GV r 
  sig GWait : GV EndR -o GV r -o GV r 
  sig GLeft : GV (Or s1 s2) -o GV s1 
  sig GRight : GV (Or s1 s2) -o GV s2
  sig GRet   : t -o GV (The t)  
  sig GOffer : GV (And s1 s2) -o (GV s1 -o t) -o (GV s2 -o t) -o (t -o GV r) -o GV r 
end


def multiplier c = 
    GRecv c (\x c -> 
    GRecv c (\y c -> 
    GSend (x * y) c)) 
     
def negator c = 
    GRecv c (\x c -> 
    GSend (0 - x) c)

def calculator c = GOffer c multiplier negator (\x -> x)

-- the T combinator 
def t x f = f x 

def prf = DualAO (DualRS (DualRS (DualSR DualESER)))
                 (DualRS (DualSR DualESER))

def answer = 
  t (GFork prf calculator) (\c -> 
  t (GLeft c) (\c -> 
  t (GSend 3 c) (\c -> 
  t (GSend 4 c) (\c -> 
     GRecv c (\x c -> GWait c (GRet x))))))

-- This following causes a type error 
{-
def wrongAnswer = 
   t (GFork prf calculator) (\c -> 
   t (GLeft c) (\c -> 
   t (GSend 4 c) (\c -> 
     GRecv c (\x c -> GWait c (GRet x)))))
-}  

