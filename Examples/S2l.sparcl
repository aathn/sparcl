data List a = Nil | Cons a (List a)

def null Nil = True
       |  _  = False

sig sub : Int -> Int <-> Int
def sub n = lift (\x -> x - n) (\x -> x + n)

sig s2l : List Int <-> List Int
def s2l = go 0
    where
      def go n Nil = Nil with null
           | n (Cons x xs) =
             let *(x, r) <- pin x' <- x in go x' |> xs in
             Cons (sub n |> x) r
    end

def (|:) x xs = Cons x xs
fixity |: 5 right

def list1  = 1 |: 2 |: 5 |: 2 |: 3 |: Nil
def list1' = s2l <| (s2l |> list1) -- this must be equal to list1
